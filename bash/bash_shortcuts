# Bash shortcuts
function sbash() {
    if [ "$(uname)" == "Darwin" ]; then
        source ~/.bash_profile;
        echo 'bash_profile reloaded!'
    elif [ "$(uname)" == "Linux" ]; then
        source ~/.bashrc;
        echo 'bashrc reloaded!'
    fi
}

function remap_caps() {
    setxkbmap -option 'caps:ctrl_modifier'
    xcape -t 150 -e 'Caps_Lock=Escape;Control_L=Escape;Control_R=Escape'
}
if [ $HOSTNAME = "jarwin" ]; then
    remap_caps
fi

alias renew="sudo ipconfig set en0 BOOTP && sudo ipconfig set en0 DHCP"
alias hs="runhaskell"

function setup_devilspie() {
    sudo apt-get install devilspie
    mkdir ~/.devilspie
    echo -e '(if\n\t(matches (window_name) "Terminal")\n\t(opacity 90)\n)' >> ~/.devilspie/terminal-opacity.ds
}


HISTCONTROL=ignoreboth
HISTIGNORE='ls:bg:fg:history:hh'
alias hh=history
alias clear_history='cat /dev/null > ~/.bash_history && history -c'

# Tmux shortcut
function tnew {
    tmux new-session -As `basename $PWD`
}

# Pandoc shortcuts
function md_to_pdf() {
    pandoc -V geometry:margin="$1"cm -o $3 $2 --latex-engine=xelatex
}
function md_to_wiki() {
    pandoc -r markdown $1 -t mediawiki -o $2
}

# Python shortcuts
alias pi='THEANO_FLAGS="device=cpu" ipython -i'
alias py='THEANO_FLAGS="device=cpu" ipython -i'
#alias gpy='THEANO_FLAGS="device=gpu0" ipython -i'
alias gpy0='THEANO_FLAGS="device=gpu0" ipython -i'
alias gpy1='THEANO_FLAGS="device=gpu1" ipython -i'
alias gpy2='THEANO_FLAGS="device=gpu2" ipython -i'
alias gpy3='THEANO_FLAGS="device=gpu3" ipython -i'
alias pylab='ipython --pylab'
alias pt='py.test -s --pdb'
alias python='/opt/anaconda/bin/python'
alias py3='python3 -i'
alias coco='coconut -t 36'

function gpy() {
    DEST="/grist"
    docker run -v ~/grist:"$DEST" -it grist_image ipython -i "$DEST/$1"
}

function purge_py() {
    find . | grep -E "(__pycache__|\.pyc|\.pyo$)" | xargs rm -rf
}

# Haskell shortcuts
alias ghci='stack ghci'

# Scala shortcuts
alias sc='scala -i'
function scc() {
    mkdir classes_temp
    scalac -d classes_temp "$1"
    cd classes_temp
    scala "$2" "${@:3}"
    cd ..
    rm -rf classes_temp
}

alias ss='spark-shell -i'
function scc() {
    touch temp.scala
    echo "{" >> temp.scala
    cat "$1" >> temp.scala
    echo "}" >> temp.scala
    ss temp.scala
}

alias samm='sbt ammonite:run'

# C++ shortucts
function gpp() {
    g++ -pipe -std=c++11 -lm -o temp "$1"
    if (( $# == 1 )); then
        ./temp
    else
        cat "$2" | ./temp

    fi

    rm temp
    echo ""
    rm a.out
}

function mkinit() {
    echo '' >> __init__.py
}

function remove_pyc() {
    find . -name "*.pyc" -exec rm -rf {} \;
}

# Git shortcuts
function gsu() {
    git submodule init;
    git submodule update;
}

function diffs() {
    vim `git ls-files -m` -p;
}

function echo_and_pull() {
    printf 'Pulling the repository %s...\n' "${PWD##*/}";
    git pull;
}

alias gst='git status'
alias gpl='git pull'
alias gps='git push'
alias gco='git commit'
alias gb='git branch'
alias gch='git checkout'

# Dotfiles shortucts
function update_dots() {
    cd ~/dotfiles && echo_and_pull;
    gsu;
    nvim +PlugInstall +qall
}

function gpa() {
    cwd=$(pwd)
    update_dots;
    update_cmls;
    cd $cwd;
}

function recreate_symbolic_links() {
    cd;
    if [ "$(uname)" == "Darwin" ]; then
        rm .bash_profile;
        ln -s dotfiles/bash/bash_profile .bash_profile;
    elif [ "$(uname)" == "Linux" ]; then
        rm .bashrc;
        ln -s dotfiles/bash/bashrc .bashrc;
    fi

    rm .inputrc;
    ln -s dotfiles/bash/inputrc .inputrc;

    cd;
    rm .vimrc;
    rm -rf .vim;
    ln -s ~/dotfiles/vim/vimrc .vimrc;
    ln -s ~/dotfiles/vim/ .vim;

    mkdir -p ${XDG_CONFIG_HOME:=$HOME/.config};
    rm $XDG_CONFIG_HOME/nvim;
    ln -s ~/dotfiles/vim $XDG_CONFIG_HOME/nvim;

    rm .tmux.conf;
    ln -s ~/dotfiles/tmux/tmux.conf .tmux.conf;
}

function setup_nvim() {
    nvim +PlugInstall +qall;
    nvim +PlugUpdate +qall;
    nvim +PlugInstall +qall;
}

function clone_dotfiles() {
    git clone git@github.com:anthony-khong/dotfiles.git;
    cd dotfiles;
    gsu;

    recreate_symbolic_links;

    setup_nvim;
    sbash;
}

function fix_nvim_tmux_navigator () {
    infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\177/' > $TERM.ti
    tic $TERM.ti
}

# Navigation shortcuts
function papers() {
    cd ~/Dropbox/Interesting\ Papers/
}

function dots() {
    cd ~/dotfiles/
}

function atools() {
    cd ~/mooc/algorithmic_toolbox
    }

function ll() {
    if [ ! -z $1 ]
    then
        find "$1" -type f
    else
        find . -type f
    fi
}

# Networking shortcuts
function jarwin() {
    ssh -4 -X akkhong@jarwinjkt.zapto.org
}

function draape() {
    ssh root@128.199.230.91
}

function flush_dns_cache() {
    sudo dscacheutil -flushcache
    sudo killall -HUP mDNSResponder
    say cache flushed
}

function check_my_ip() {
    curl -s checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//'
}

# Vim shortcuts
alias vi="/usr/bin/vim -p"
alias vim="nvim -p"
alias vff="nvim +'FZF ~'"
function eff() {
    vim $(fzf)
}

function vs() {
    touch "$1"
    chmod +x "$1"
    vim "$1"
}

# FSWatch
function do_if_read() {
    fswatch "$1" | (while read; do eval "$2; echo Last executed $(date)"; done)
}

function auto_md_to_pdf() {
    local pdf_path="${1%.*}.pdf"
    fswatch "$1" | (while read; do eval "md_to_pdf 3 $1 $pdf_path; echo Last compiled: $(date)"; done)
}

# Jekyll
alias jserve="bundle exec jekyll serve --drafts --watch"

# Karabiner
alias karabiner="/Applications/Karabiner.app/Contents/Library/bin/karabiner"

function fix_cuda_compile() {
    sudo ldconfig /usr/local/cuda/lib64
}

function slack() {
    google-chrome https://cmls.slack.com/messages/general_/
}

# Youtube DL
alias ytdl_mp3="youtube-dl --extract-audio --audio-format mp3"

# Carvil
function revenue() {
    ipython ~/carvil/scripts/revenue_cli.py "$@"
}

function start_db() {
    ~/.dropbox-dist/dropboxd
}

function revenue_breakdown() {
    ipython ~/carvil/scripts/revenue_check.py "$@"
}

