"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               Plugin Settings                               "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set runtimepath^=~/.config/nvim

" Enable plugins
" call pathogen#infect()
call plug#begin()

" Editing
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'SirVer/ultisnips'
Plug 'davidhalter/jedi-vim'
Plug 'ervandew/supertab'
Plug 'honza/vim-snippets'
Plug 'junegunn/vim-easy-align'
Plug 'scrooloose/nerdcommenter'

" Motions
Plug 'easymotion/vim-easymotion'
Plug 'ggVGc/vim-fuzzysearch'

" Colour Schemes
Plug 'flazz/vim-colorschemes'

" Utilities
Plug 'christoomey/vim-tmux-navigator'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'scrooloose/nerdtree'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'tomtom/tlib_vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sensible'

" Visualisation
Plug 'Yggdroot/indentLine'
Plug 'airblade/vim-gitgutter'
Plug 'benekastah/neomake'
Plug 'bling/vim-airline'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'plasticboy/vim-markdown'
Plug 'tpope/vim-surround'

if has("unix")
  let s:uname = system("uname")
  if s:uname == "Darwin\n"
        Plug 'junegunn/vim-xmark', { 'do': 'make' }
  endif
endif

" Add plugins to &runtimepath
call plug#end()
nnoremap <Space>I :PlugInstall<CR>
nnoremap <Space>U :PlugUpdate<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                            Vim General Settings                             "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
filetype off
syntax on
filetype plugin indent on

" This does not seem to work with NeoVim
" For tmux colour compatibility
if has('vim')
set term=screen-256color
endif

" Disable folding so that the key 'f' can be used for movement
set nofoldenable

" The bells can be distracting in OSX
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" More line buffer
set so=3

" Better copy and paste
set pastetoggle=<F2>
set clipboard=unnamed
set clipboard+=unnamedplus

" Mouse and backspace
set mouse=a
set bs=2

" Showing line numbers and length
set number
set relativenumber
set tw=79
set nowrap
set fo-=t

" Useful settings
set history=700
set undolevels=700

" Use spaces instead of tabs
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

" Make search case insensitive
set hlsearch
set incsearch
set ignorecase
set smartcase

" Disable stupid backup and swap files - they trigger too many events
" for file system watchers
set nobackup
set nowritebackup
set noswapfile

" Tab management
set splitright
set splitbelow

" Foldings
set foldmethod=indent
set foldlevelstart=99

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Colour Scheme                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" It looks nicer in some colour schemes
set background=dark

" This is needed to make Airline work
set laststatus=2

" Colour scheme
" set t_Co=256
silent! colorscheme gruvbox-akk
silent! let g:rehash256 = 1

" Some other colour schemes that I previously liked
" colorscheme wombat256mod
" colorscheme molokai
" colorscheme badwolf
" let g:molokai_original = 1

" Make vim transparent to the background
hi Normal ctermbg=none
highlight NonText ctermbg=none

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Vim Bindings                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set the leader to comma
let mapleader = ","

" Shortuct to reload vimrc
nmap <Leader>R :so ~/.config/nvim/init.vim<CR>:echo '.nvimrc reloaded!'<CR>
nmap <Leader>M :so ~/dotfiles_akk/vim/others/mbk_vimrc<CR>:echo 'Changed to MBK'<CR>
nmap <Leader>A :so ~/dotfiles_akk/vim/vimrc<CR>:echo 'Changed to AKK'<CR>

" Jump to escape mode
"ino hh <C-c>
"ino jj <C-c>

" Moving up and down physical lines
nnoremap j gj
nnoremap k gk

" Page up and down, then centers the cursor
noremap <C-u> <S-Up>zz
noremap <C-d> <S-Down>zz

" Jump to next method
nmap }} ]m

" Centers screen after jumping to mark
map <expr> M printf('`%c zz',getchar())
map <expr> M printf('\'%c zz',getchar())

" Centers screen whenever a search is found
nnoremap G Gzz
nnoremap n nzz
nnoremap N Nzz

" Pane movements
nnoremap <Leader>hs :split<CR>
nnoremap <Leader>vs :vsplit<CR>

" Jumping between tabs
map <Leader>, <esc>:tabprevious<CR>
map <Leader>. <esc>:tabnext<CR>

" Close current tab
nnoremap <Leader>e :q<CR>
vnoremap <Leader>e :q<CR>

" Easier moving of code blocks
vnoremap < <gv  " better indentation
vnoremap > >gv  " better indentation

" Turn off search highlights
nnoremap <C-x> :nohlsearch<CR>

" Copy the entire script to the clipboard
nnoremap <Leader>l mwggVG"+y'wzz
" Copy from current line to the top
nnoremap <Leader>k mwggV'w"+y'wzz
" Copy from current line to the bottom
nnoremap <Leader>j mwGV'w"+y'wzz
" Copy entire line to the clipboard
nnoremap <Leader>y V"+y
" Copy selection to the clipboard
vnoremap <Leader>c "+y

" Delete and send to the blackhole register
" (Delete a line in normal mode, but delete the selection in visual mode)
nmap <Leader>d "_dd
vmap <Leader>d "_d

" Save current script
nnoremap <Leader>s :update<CR>

" Remove trailing whitespace
nnoremap <silent> <Leader>w :keeppatterns %s/\s\+$//<CR>

" Will's equals sign idea
nnoremap <Leader>= i<del><Space><esc>gelcw<Space>=<Space><esc>

" Map sort function to a key
vnoremap <Leader>o :sort<CR>

" Switch back and forth between relative and absolute number
nnoremap <Leader>n :set relativenumber!<CR>

" Fold Toggle
nnoremap <Leader>f za

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Generic Autos                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

autocmd BufRead,BufNewFile *.md setfiletype markdown

" Enbale CUDA syntax
au BufNewFile,BufRead *.cu set ft=cu
au BufNewFile,BufRead *.cuh set ft=cu

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                   Plugins                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Tmux Navigator
if exists('$TMUX')
function! TmuxOrSplitSwitch(wincmd, tmuxdir)
let previous_winnr = winnr()
silent! execute "wincmd " . a:wincmd
if previous_winnr == winnr()
    call system("tmux select-pane -" . a:tmuxdir)
    redraw!
endif
endfunction

let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<cr>
nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<cr>
nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<cr>
nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<cr>
else
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
endif

" Airline
let g:airline_theme = 'bubblegum'
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_left_sep = '»'
let g:airline_right_sep = '«'
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }
let g:airline_section_y = ''

" Rainbow Parentheses
augroup rainbow_python
autocmd!
autocmd FileType python RainbowParentheses
augroup END
nmap <Space>rp :RainbowParentheses!!<CR>
"let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
"let g:rainbow#blacklist = [109, 110, 242, 252]

" IndentLine
let g:indentLine_enabled = 1
let g:indentLine_color_term = 235
let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_leadingSpaceChar = '.'

" Goyo
nmap <Space>gy :Goyo<CR>:GitGutterEnable<CR>

" LimeLight
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" GitGutter
let g:gitgutter_sign_column_always = 1
nmap <Space>gg :GitGutter<CR>
nmap <Space>] <Plug>GitGutterPrevHunk
nmap <Space>[ <Plug>GitGutterNextHunk
nmap <Space>hs <Plug>GitGutterStageHunk
nmap <Space>hr <Plug>GitGutterRevertHunk

" NeoMake
autocmd! BufWritePost * Neomake
let g:neomake_verbose = 0
let g:neomake_error_sign = {
    \ 'text': '>>',
    \ 'texthl': 'ErrorMsg',
    \ }
hi ErrorMsg ctermbg=234 ctermfg=9
let g:neomake_python_enabled_makers = ['pyflakes']

" Fugitive
nmap <Space>gd :Gdiff<CR>

" NERDTree toggle
nmap <Space>n :NERDTreeToggle<CR>

" NERDCommenter
let g:NERDCreateDefaultMappings = 0
nmap <Space>c <Plug>NERDCommenterComment
vmap <Space>c <Plug>NERDCommenterComment
nmap <Space>C <Plug>NERDCommenterUncomment
vmap <Space>C <Plug>NERDCommenterUncomment

" SuperTab
let g:SuperTabDefaultCompletionType = "<c-n>"

" EasyMotion
let g:EasyMotion_smartcase = 1
let g:EasyMotion_keys = "aoeui'l;z,rqv.cjwyfxbdhtns"
map <Space><Space>em <Plug>(easymotion-prefix)
nmap <Space>w <Plug>(easymotion-w)
vmap <Space>w <Plug>(easymotion-w)
nmap <Space>b <Plug>(easymotion-b)
vmap <Space>b <Plug>(easymotion-b)
nmap <Space>s <Plug>(easymotion-s)
vmap <Space>s <Plug>(easymotion-s)

" FuzzySearch
nmap <Space>/ :FuzzySearch<CR>

" FZF
nnoremap <Space>p :FZF ~<CR>
nnoremap vcp :FZF ~<CR>
nnoremap <C-p> :FZF <CR>
let g:fzf_action = {
            \'enter': 'tabedit',
            \'ctrl-v': 'vsplit',
            \'ctrl-t': 'tabedit'}

" Easy Align
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" UltiSnips
let g:UltiSnipsExpandTrigger = "<Tab>"
let g:UltiSnipsJumpForwardTrigger = "<C-b>"
let g:UltiSnipsJumpBackwardTrigger = "<C-z>"
let g:UltiSnipsSnippetDirectories = ["UltiSnips", "custom_snippets"]
