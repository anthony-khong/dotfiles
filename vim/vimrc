" This is the remote vimrc. The local vimrc should include the following:
" set runtimepath^=~/dotfiles_akk/vim
" source ~/dotfiles_akk/vim/vimrc

"==========================================================================="
" Plugins Settings                                                          "
"==========================================================================="

" Enable plugins
" call pathogen#infect()
call plug#begin()

" Plug 'scrooloose/syntastic'
Plug 'FelikZ/ctrlp-py-matcher'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'Yggdroot/indentLine'
Plug 'airblade/vim-gitgutter'
Plug 'benekastah/neomake'
Plug 'bling/vim-airline'
Plug 'christoomey/vim-tmux-navigator'
Plug 'davidhalter/jedi-vim'
Plug 'easymotion/vim-easymotion'
Plug 'ervandew/supertab'
Plug 'flazz/vim-colorschemes'
Plug 'flazz/vim-colorschemes'
Plug 'ggVGc/vim-fuzzysearch'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'kien/ctrlp.vim'
Plug 'plasticboy/vim-markdown'
Plug 'scrooloose/nerdtree'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'tomtom/tlib_vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'

" Add plugins to &runtimepath
call plug#end()
nnoremap <Space>I :PlugUpdate<CR>

"==========================================================================="
" Shortcuts for Pair Programming                                            "
"==========================================================================="
nnoremap <Space>m :so ~/dotfiles_akk/others/mbk_vimrc<CR>:echo 'Changed to MBK'<CR>
nnoremap <Space>a :so ~/dotfiles_akk/vim/vimrc<CR>:echo 'Changed to AKK'<CR>

"==========================================================================="
" General Settings                                                          "
"==========================================================================="

" This is needed to make Airline work
set laststatus=2

" Enable syntax highlighting
filetype off
syntax on
filetype plugin indent on

" This does not seem to work with NeoVim
" For tmux colour compatibility
if has('vim')
    set term=screen-256color
endif

" Disable folding so that the key 'f' can be used for movement
set nofoldenable

" The bells can be distracting in OSX
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" Five line buffer
set so=5

" Better copy & paste
set pastetoggle=<F2>
set clipboard=unnamed
set clipboard+=unnamedplus

" Mouse and backspace
set mouse=a  " on OSX press ALT and click
set bs=2     " make backspace behave like normal again

" Showing line numbers and length
set number          " show line numbers
set relativenumber  " but show relative numbers by default
set tw=79           " width of document (used by gd)
set nowrap          " don't automatically wrap on load
set fo-=t           " don't automatically wrap text when typing

" Useful settings
set history=700
set undolevels=700

" Real programmers don't use TABs but spaces
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

" Make search case insensitive
set hlsearch
set incsearch
set ignorecase
set smartcase

" Disable stupid backup and swap files - they trigger too many events
" for file system watchers
set nobackup
set nowritebackup
set noswapfile

"==========================================================================="
" Colourscheme                                                              "
"==========================================================================="
" Show whitespace
" MUST be inserted BEFORE the colourscheme command
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
au InsertLeave * match ExtraWhitespace /\s\+$/

" Colour scheme
" set t_Co=256
silent! colorscheme iceberg
silent! let g:rehash256 = 1

" Some other colour schemes that I previously liked
" colorscheme wombat256mod
" colorscheme molokai
" colorscheme badwolf
" let g:molokai_original = 1

" Make vim transparent to the background
hi Normal ctermbg=none
highlight NonText ctermbg=none

"==========================================================================="
" Key Remaps                                                                "
"==========================================================================="

" Set the leader to comma
let mapleader = ","

" Jump to escape mode
ino hh <esc>
ino jj <esc>

" Moving up and down physical lines
nnoremap j gj
nnoremap k gk

" Page up and down, then centers the cursor
noremap <C-u> <S-Up>zz
noremap <C-d> <S-Down>zz

" Jump to next method
nmap }} ]m

" Centers screen after jumping to mark
map <expr> M printf('`%c zz',getchar())
map <expr> M printf('\'%c zz',getchar())

" Centers screen whenever a search is found
nnoremap G Gzz
:nnoremap n nzz
:nnoremap N Nzz

" Pane movements
nnoremap <Leader>v <C-w>v
nnoremap <Leader>z <C-w>w

" Jumping between tabs
map <Leader>, <esc>:tabprevious<CR>
map <Leader>. <esc>:tabnext<CR>

" Close current tab
nnoremap <Leader>' :q<CR>

" Easier moving of code blocks
vnoremap < <gv  " better indentation
vnoremap > >gv  " better indentation

" Turn off search highlights
nnoremap <C-x> :nohlsearch<CR>

" Copy the entire script to the clipboard
nnoremap <Leader>l mwggVG"+y'wzz
" Copy from current line to the top
nnoremap <Leader>k mwggV'w"+y'wzz
" Copy from current line to the bottom
nnoremap <Leader>j mwGV'w"+y'wzz
" Copy entire line to the clipboard
nnoremap <Leader>y V"+y
" Copy selection to the clipboard
vnoremap <Leader>c "+y

" Delete and send to the blackhole register
" (Delete a line in normal mode, but delete the selection in visual mode)
nmap <Leader>d "_dd
vmap <Leader>d "_d

" Save current script
nnoremap <Leader>s :update<CR>

" Remove trailing whitespace
:nnoremap <silent> <Leader>w :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Will's equals sign idea
nnoremap <Leader>= i<del><Space><esc>gelcw<Space>=<Space><esc>

" Map sort function to a key
vnoremap <Leader>o :sort<CR>

" Switch back and forth between relative and absolute number
nnoremap <Leader>n :set relativenumber!<CR>

"==========================================================================="
" Generic Autos                                                             "
"==========================================================================="
autocmd BufRead,BufNewFile *.md setfiletype markdown

" Enbale CUDA syntax
au BufNewFile,BufRead *.cu set ft=cu
au BufNewFile,BufRead *.cuh set ft=cu

" easier formatting of paragraphs
vmap Q gq
nmap Q gqap

" =========================================================================="
" Plugins                                                                   "
" =========================================================================="

" NERDTree toggle
nmap <Space>n :NERDTreeToggle<CR>

" CtrlP
let g:ctrlp_max_height = 30
set wildignore+=*.pyc
set wildignore+=*_build/*
set wildignore+=*/coverage/*
set wildignore+=*.theano/*

" Make CtrlP open a new tab by default
let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
    \ }

" Make CtrlP use pymatcher and ag
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
if executable('ag')
    let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
        \ --ignore .git
        \ --ignore .svn
        \ --ignore .hg
        \ --ignore .DS_Store
        \ --ignore "**/*.pyc"
        \ --ignore .dropbox
        \ --ignore .theano
        \ --ignore .nv
        \ --ignore .config
        \ --ignore .ipython
        \ --ignore ".cache/*"
        \ --ignore ".fzf/*"
        \ --ignore ".pia_manager/*"
        \ --ignore ".themes/*"
        \ --ignore ".texmf*"
        \ --ignore ".vim/*"
        \ --ignore ".Skype/*"
        \ --ignore ".Trash/*"
        \ --ignore "Applications/*"
        \ --ignore "Desktop/*"
        \ --ignore "Downloads/*"
        \ --ignore "Dropbox/*"
        \ --ignore "Lasagne/*"
        \ --ignore "Library/*"
        \ --ignore "Music/*"
        \ --ignore "Pictures/*"
        \ --ignore "anaconda/*"
        \ --ignore "pylearn2/*"
        \ --ignore "xgboost/*"
        \ -g ""'
endif
nmap <Space>p :CtrlP ~<CR>

" IndentLine
let g:indentLine_enabled = 1
let g:indentLine_color_term = 235
let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_leadingSpaceChar = '.'

" SuperTab
let g:SuperTabDefaultCompletionType = "<c-n>"

" EasyMotion
map <Space><Space>em <Plug>(easymotion-prefix)
nmap <Space>w <Plug>(easymotion-w)
nmap <Space>e <Plug>(easymotion-e)
nmap <Space>b <Plug>(easymotion-b)
nmap <Space>f <Plug>(easymotion-f)
nmap <Space>F <Plug>(easymotion-F)
vmap <Space>w <Plug>(easymotion-w)
vmap <Space>e <Plug>(easymotion-e)
vmap <Space>b <Plug>(easymotion-b)
vmap <Space>f <Plug>(easymotion-f)
vmap <Space>F <Plug>(easymotion-F)

" Syntastic
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 0
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_loc_list_height=1
" highlight SyntasticWarning NONE
" highlight SyntasticError NONE

" NeoMake
autocmd! BufWritePost * Neomake
let g:neomake_verbose = 0
let g:neomake_error_sign = {
    \ 'text': '>>',
    \ 'texthl': 'ErrorMsg',
    \ }
hi ErrorMsg ctermbg=235 ctermfg=1
let g:neomake_python_enabled_makers = ['pyflakes']

" Airline
let g:airline_theme = 'understated'
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_left_sep = '»'
let g:airline_right_sep = '«'

" Some old ones I liked
" let g:airline_theme = 'badwolf' # with badwolf
" let g:airline_theme = 'powerlineish' # with wombat256mod

" Fugitive
nmap <Space>gd :Gdiff<CR>

" GitGutter
let g:gitgutter_sign_column_always = 1
nmap <Space>gg :GitGutter<CR>
nmap <Space>] <Plug>GitGutterPrevHunk
nmap <Space>[ <Plug>GitGutterNextHunk
nmap <Space>hs <Plug>GitGutterStageHunk
nmap <Space>hr <Plug>GitGutterRevertHunk

" FuzzySearch
nmap <Space>/ :FuzzySearch<CR>

" Tmux Navigator
if exists('$TMUX')
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    silent! execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      call system("tmux select-pane -" . a:tmuxdir)
      redraw!
    endif
  endfunction

  let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

  nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<cr>
  nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<cr>
  nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<cr>
  nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<cr>
else
  map <C-h> <C-w>h
  map <C-j> <C-w>j
  map <C-k> <C-w>k
  map <C-l> <C-w>l
endif

" Goyo
nmap <Space>gy :Goyo<CR>:GitGutterEnable<CR>

" LimeLight
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" Rainbow Parentheses
augroup rainbow_python
  autocmd!
  autocmd FileType python RainbowParentheses
augroup END
nmap <Space>rp :RainbowParentheses!!<CR>
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
let g:rainbow#blacklist = [109, 110, 242, 252]
