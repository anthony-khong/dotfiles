let dark_background = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               Plugin Settings                               "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set runtimepath^=~/.config/nvim

" Enable plugins
call plug#begin()

" Editing
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'SirVer/ultisnips', { 'on': [] }
Plug 'ervandew/supertab'
Plug 'honza/vim-snippets'
Plug 'junegunn/vim-easy-align'
Plug 'scrooloose/nerdcommenter'

" Objects
Plug 'kana/vim-textobj-user'
Plug 'bps/vim-textobj-python'
Plug 'michaeljsmith/vim-indent-object'
Plug 'vim-scripts/argtextobj.vim'

" Motions
Plug 'easymotion/vim-easymotion'
Plug 'ggVGc/vim-fuzzysearch'
" Plug 'justinmk/vim-sneak'
Plug 'vim-scripts/ctags.vim'

" Utilities
Plug 'Shougo/vimproc', {'do' : 'make'}
Plug 'christoomey/vim-tmux-navigator'
Plug 'jpalardy/vim-slime'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
"Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'scrooloose/nerdtree'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'tomtom/tlib_vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'dense-analysis/ale'

" Visualisation
Plug 'ncm2/float-preview.nvim'
Plug 'airblade/vim-gitgutter'
Plug 'drewtempelmeyer/palenight.vim' " Use with whimsy.itermcolors
Plug 'itchyny/lightline.vim'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'patstockwell/vim-monokai-tasty'
Plug 'plasticboy/vim-markdown'
Plug 'roman/golden-ratio'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/textutil.vim'

" Clojure
Plug 'eraserhd/parinfer-rust'
Plug 'guns/vim-clojure-highlight'
Plug 'guns/vim-clojure-static'
Plug 'guns/vim-sexp'
"Plug 'tpope/vim-fireplace'
Plug 'tpope/vim-sexp-mappings-for-regular-people'
"Plug 'tpope/vim-salve'
"Plug 'liquidz/vim-iced', {'for': 'clojure'}
Plug 'Olical/conjure', { 'tag': 'v2.1.2', 'do': 'bin/compile' }

" Haskell
Plug 'alx741/vim-hindent'
Plug 'nbouscal/vim-stylish-haskell'
Plug 'neovimhaskell/haskell-vim'
Plug 'parsonsmatt/intero-neovim', { 'for': 'haskell' }

" Python
Plug 'Shougo/echodoc.vim'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'hylang/vim-hy'
Plug 'manicmaniac/coconut.vim'
Plug 'zchee/deoplete-jedi'

" R
Plug 'jalvesaq/Nvim-R'

" Scala
Plug 'derekwyatt/vim-scala'

" Docker
Plug 'ekalinin/Dockerfile.vim'

" Racket
"Plug 'wlangstroth/vim-racket'
"Plug 'MicahElliott/vrod'

" F#
Plug 'fsharp/vim-fsharp', {
      \ 'for': 'fsharp',
      \ 'do':  'make fsautocomplete',
      \}
Plug 'callmekohei/deoplete-fsharp', { 'do': 'bash install.bash' }

" HTML
Plug 'mattn/emmet-vim'

if has("unix")
  let s:uname = system("uname")
  if s:uname == "Darwin\n"
        Plug 'junegunn/vim-xmark', { 'do': 'make' }
  endif
endif

" Add plugins to &runtimepath
call plug#end()

" Lazy loading for UltiSnips
augroup load_ultisnips
  autocmd!
  autocmd InsertEnter * call plug#load('ultisnips') | autocmd! load_ultisnips
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                            Vim General Settings                             "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set the leader to comma
let mapleader = ","
let maplocalleader="\<space>"

" Makes copy and pasting work
set clipboard=unnamed
set clipboard+=unnamedplus

" One tab equals to four spaces
set tabstop=4
set softtabstop=4
set shiftwidth=4

" Use multiple of shiftwidth when indenting with '<' and '>'
set shiftround

" Expand tab to spaces
set expandtab

" Search case insensitive when all characters are lower case
set ignorecase
set smartcase

" Does not release visual mode during block indentation
vnoremap < <gv
vnoremap > >gv

" No more weird characters when pressing <Esc>
set ttimeout
set ttimeoutlen=0

" Faster scrolling
set ttyfast

" Enable omnicompletion
filetype plugin on
set omnifunc=syntaxcomplete#Complete

" Enable syntax highlighting
syntax on
filetype plugin indent on

" This does not seem to work with NeoVim
" For tmux colour compatibility
if has('vim')
    set term=screen-256color
endif

" Disable folding so that the key 'f' can be used for movement
set nofoldenable

" The bells can be distracting in OSX
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" Gets rid of weird character in new GNOME terminal
if has("unix")
  let s:uname = system("uname")
  if s:uname == "Linux\n"
        set novisualbell
  endif
endif

" More line buffer
set so=3

" Better copy and paste
set pastetoggle=<F2>

" Mouse and backspace
set mouse=a
set bs=2

" Showing line numbers and length
set number
set relativenumber
set fo-=t

" Useful settings
set history=700
set undolevels=700

" Disable stupid backup and swap files - they trigger too many events
" for file system watchers
set nobackup
set nowritebackup
set noswapfile

" Tab management
set splitright
set splitbelow

" Live substitute preview
 if has('nvim')
     set inccommand=nosplit
 endif

" No redundant info
set noshowmode

" Sign column shows up all the time
set signcolumn=yes

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Colour Scheme                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" It looks nicer in some colour schemes
if dark_background
    set background=dark
    silent! colorscheme vim-monokai-tasty
    "silent! colorscheme monokai
    "let g:palenight_terminal_italics=1
    hi Normal  guibg=NONE ctermbg=NONE
    hi LineNr  guibg=NONE ctermbg=NONE
    hi NonText guibg=NONE ctermbg=NONE
else
    silent! colorscheme akk_light
endif

if (has("nvim"))
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

if (has("termguicolors"))
  set termguicolors
endif

" This is needed to make Airline work
set laststatus=2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Vim Bindings                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Jump to escape mode
inoremap hh <Esc>
inoremap thhh th<Esc>
inoremap jj <Esc>
tnoremap <Esc> <C-\><C-n>

" Moving up and down physical lines
nnoremap j gj
nnoremap k gk

" Page up and down, then centers the cursor
noremap <C-u> <S-Up>zz
noremap <C-d> <S-Down>zz

" Jump to next method
nmap }} ]m
nmap {{ [m

" Centers screen whenever a search is found
nnoremap G Gzz
nnoremap n nzz
nnoremap N Nzz

" Since <C-a> is the Tmux prefix, we replace <C-a> with <C-o>
inoremap <C-o> <C-a>

" Repeat dot on multiple lines
vnoremap . :normal .<CR>

" Adds numbered jumps to jump list
nnoremap <expr> k (v:count > 1 ? "m'" . v:count : '') . 'k'
nnoremap <expr> j (v:count > 1 ? "m'" . v:count : '') . 'j'

" Make Ctrl-e jump to the end of the current line in the insert mode. This is
" handy when you are in the middle of a line and would like to go to its end
" without switching to the normal mode.
inoremap <C-e> <C-o>$

" Jumping between tabs
nnoremap ( :tabprevious<CR>
nnoremap ) :tabnext<CR>

" Jumping between Vim panes
nnoremap <Space>j <C-W><C-J>
nnoremap <Space>k <C-W><C-K>
nnoremap <Space>l <C-W><C-L>
nnoremap <Space>h <C-W><C-H>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Generic Autos                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

autocmd BufNewFile,BufRead *.clj set filetype=clojure
autocmd BufNewFile,BufRead *.cu set ft=cu
autocmd BufNewFile,BufRead *.cuh set ft=cu
autocmd BufRead,BufNewFile *.md setfiletype markdown
autocmd BufRead,BufNewFile *.sc setfiletype scala

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                   Plugins                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Lightline
let g:lightline = {
      \ 'colorscheme': 'one',
      \ }

" Tmux Navigator
if exists('$TMUX')
    function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    silent! execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
        call system("tmux select-pane -" . a:tmuxdir)
        redraw!
    endif
    endfunction

    let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
    let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
    let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

    nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<cr>
    nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<cr>
    nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<cr>
    nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<cr>
    tnoremap <silent> <C-h> <C-\><C-n>:call TmuxOrSplitSwitch('h', 'L')<cr>
    tnoremap <silent> <C-j> <C-\><C-n>:call TmuxOrSplitSwitch('j', 'D')<cr>
    tnoremap <silent> <C-k> <C-\><C-n>:call TmuxOrSplitSwitch('k', 'U')<cr>
    tnoremap <silent> <C-l> <C-\><C-n>:call TmuxOrSplitSwitch('l', 'R')<cr>
else
    map <C-h> <C-w>h
    map <C-j> <C-w>j
    map <C-k> <C-w>k
    map <C-l> <C-w>l
endif

" Airline
let g:airline_theme = 'distinguished'
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_left_sep = '»'
let g:airline_right_sep = '«'
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }
let g:airline_section_y = ''

" Ale
let g:ale_linters = {
    \ 'python': ['pyflakes', 'mypy'],
    \ 'scala': ['scalastyle'],
    \ 'haskell': ['stack-ghc-mod', 'hlint'],
    \ 'clojure': ['clj-kondo', 'joker']
    \ }
let g:ale_python_mypy_options = "–ignore-missing-imports"
let g:ale_linters_explicit = 1
let g:ale_completion_enabled = 1
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '!!'
hi ALEErrorSign   ctermbg=234         ctermfg=9  guibg=234 guifg=9
hi ALEWarningSign ctermbg=234         ctermfg=11 guibg=234 guifg=11
hi ALEWarning     ctermbg=DarkMagenta guibg=DarkMagenta
let g:airline#extensions#ale#enabled = 1

" NERDCommenter
let g:NERDCreateDefaultMappings = 0
nmap <Space>c <Plug>NERDCommenterToggle
vmap <Space>c <Plug>NERDCommenterToggle
nmap gcc <Plug>NERDCommenterToggle
vmap gcc <Plug>NERDCommenterToggle

" SuperTab
let g:SuperTabDefaultCompletionType = "<c-n>"

" EasyMotion
let g:EasyMotion_smartcase = 1
let g:EasyMotion_keys = "aoeui'l;z,rqv.cjwyfxbdhtns"

" FuzzySearch
let g:fzf_action = {
            \'enter': 'tabedit',
            \'ctrl-v': 'vsplit',
            \'ctrl-t': 'tabedit'}

" Easy Align
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" UltiSnips
let g:UltiSnipsExpandTrigger = "<Tab>"
let g:UltiSnipsJumpForwardTrigger = "<C-b>"
let g:UltiSnipsJumpBackwardTrigger = "<C-z>"
let g:UltiSnipsSnippetDirectories = ["UltiSnips", "custom_snippets"]

" Easy-Align
nmap <Space>= V}oga*=<CR>

" Deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#sources = {}
let g:deoplete#sources.scala = ['buffer', 'tags', 'omni']
let g:deoplete#omni#input_patterns = {}
let g:deoplete#omni#input_patterns.scala = ['[^. *\t0-9]\.\w*',': [A-Z]\w', '[\[\t\( ][A-Za-z]\w*']
let g:deoplete#sources#jedi#server_timeout = 60
call deoplete#custom#option({
  \ 'auto_complete_delay': 0,
  \ 'ignore_case': v:true,
  \ 'refresh_always': v:false,
\ })

" Taken from https://oli.me.uk/getting-started-with-clojure-neovim-and-conjure-in-minutes/
call deoplete#custom#option(
  \ 'keyword_patterns',
  \ {'clojure': '[\w!$%&*+/:<=>?@\^_~\-\.#]*'}
  \ )
set completeopt-=preview
let g:float_preview#docked = 0
let g:float_preview#max_width = 80
let g:float_preview#max_height = 40

" Deoplete-Jedi
highlight Pmenu ctermbg=8 guibg=#606060
highlight PmenuSel ctermbg=1 guifg=#dddd00 guibg=#1f82cd
highlight PmenuSbar ctermbg=0 guibg=#d6d6d6

" Ctags
set tags=./tags;/

" Coconut
autocmd FileType coconut setlocal commentstring=#\ %s

" Parinfer
let g:parinfer_mode = 'smart'
let g:parinfer_enabled = 1
let g:parinfer_force_balance = 0

" FSharp
let g:fsharp_map_keys = 0

" Haskell - Taken from: https://blog.jez.io/haskell-development-with-neovim/
let g:haskell_indent_before_where = 2
let g:haskell_indent_case_alternative = 1
let g:haskell_indent_if = 2
let g:haskell_indent_let_no_in = 0
let g:hindent_line_length = 90
let g:hindent_on_save = 0
let g:intero_type_on_hover = 1
let g:intero_use_neomake = 0
let g:intero_vertical_split = 1
let g:intero_window_size = 8
set updatetime=100

" Slime
let g:slime_target = "tmux"
silent! let g:slime_default_config = {
    \ "socket_name": split($TMUX, ",")[0],
    \ "target_pane": ":0.1"
    \ }
let g:slime_dont_ask_default = 1
let g:slime_python_ipython = 1

" Echodoc
let g:echodoc_enable_at_startup = 1

" Rainbow Parantheses
augroup rainbow_lisp
  autocmd!
  autocmd FileType lisp,clojure,scheme RainbowParentheses
augroup END

" Vim Commentary
autocmd FileType hy setlocal commentstring=;;%s

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                           Leader + Space Remaps                             "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turning off highlights (after searching)
nnoremap <Space>nh :nohlsearch<CR>

" Close current tab
nnoremap <Space>eq :q<CR>

" Tabs (misnamed as buffers)
nnoremap <Space>be :FZF<CR>
nnoremap <Space>bh :FZF ~<CR>
nnoremap <Space>bj :NERDTreeToggle<CR>
nnoremap <Space>bn :tabnext<CR>
nnoremap <Space>bp :tabprevious<CR>
nnoremap <Space>bs :update<CR>
nnoremap <Space>bx :q<CR>
if !exists('g:lasttab')
  let g:lasttab = 1
endif
nnoremap <Space>bb :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

" Remove trailing whitespace
nnoremap <silent> <Space>rw :keeppatterns %s/\s\+$//<CR>

" Shortuct to reload vimrc
nmap <Space>rv :so ~/.config/nvim/init.vim<CR>:echo '.nvimrc reloaded!'<CR>

" Panes
nnoremap <Space>ah :split<CR>
nnoremap <Space>av :vsplit<CR>
nnoremap <Space>ax :q<CR>

" Copy the entire script to the clipboard, to top and to bottom
nnoremap <Space>ya mwggVG"+y'wzz
nnoremap <Space>yk mwggV'w"+y'wzz
nnoremap <Space>yj mwGV'w"+y'wzz

" Map sort function to a key
vnoremap <Space>s :sort<CR>

" Switch back and forth between relative and absolute number
nnoremap <Space>rn :set relativenumber!<CR>

" Git
nnoremap <Space>gg :GitGutter<CR>
nnoremap <Space>gd :Gdiff<CR>
nnoremap <Space>gb :Gblame<CR>

" Jumps
" This is to get rid of awful <Leader><Leader> default
map <Space><Space>em <Plug>(easymotion-prefix)
nmap <Space><Space> <Plug>(easymotion-s)
vmap <Space><Space> <Plug>(easymotion-s)

" Fold Toggle
" nnoremap <Leader>f za
" nnoremap <Leader>df zE
" nnoremap <Leader>} zfa}

" Disable sexp-mapping hooks
let g:sexp_filetypes = ''
function! s:vim_sexp_mappings()
    xmap <silent><buffer> af              <Plug>(sexp_outer_list)
    omap <silent><buffer> af              <Plug>(sexp_outer_list)
    xmap <silent><buffer> if              <Plug>(sexp_inner_list)
    omap <silent><buffer> if              <Plug>(sexp_inner_list)
    xmap <silent><buffer> aF              <Plug>(sexp_outer_top_list)
    omap <silent><buffer> aF              <Plug>(sexp_outer_top_list)
    xmap <silent><buffer> iF              <Plug>(sexp_inner_top_list)
    omap <silent><buffer> iF              <Plug>(sexp_inner_top_list)
    xmap <silent><buffer> as              <Plug>(sexp_outer_string)
    omap <silent><buffer> as              <Plug>(sexp_outer_string)
    xmap <silent><buffer> is              <Plug>(sexp_inner_string)
    omap <silent><buffer> is              <Plug>(sexp_inner_string)
    xmap <silent><buffer> ae              <Plug>(sexp_outer_element)
    omap <silent><buffer> ae              <Plug>(sexp_outer_element)
    xmap <silent><buffer> ie              <Plug>(sexp_inner_element)
    omap <silent><buffer> ie              <Plug>(sexp_inner_element)
    nmap <silent><buffer> [[              <Plug>(sexp_move_to_prev_top_element)
    xmap <silent><buffer> [[              <Plug>(sexp_move_to_prev_top_element)
    omap <silent><buffer> [[              <Plug>(sexp_move_to_prev_top_element)
    nmap <silent><buffer> ]]              <Plug>(sexp_move_to_next_top_element)
    xmap <silent><buffer> ]]              <Plug>(sexp_move_to_next_top_element)
    omap <silent><buffer> ]]              <Plug>(sexp_move_to_next_top_element)
    nmap <silent><buffer> [e              <Plug>(sexp_select_prev_element)
    xmap <silent><buffer> [e              <Plug>(sexp_select_prev_element)
    omap <silent><buffer> [e              <Plug>(sexp_select_prev_element)
    nmap <silent><buffer> ]e              <Plug>(sexp_select_next_element)
    xmap <silent><buffer> ]e              <Plug>(sexp_select_next_element)
    omap <silent><buffer> ]e              <Plug>(sexp_select_next_element)
    nmap <silent><buffer> ==              <Plug>(sexp_indent)
    nmap <silent><buffer> =-              <Plug>(sexp_indent_top)
    nmap <silent><buffer> <LocalLeader>i  <Plug>(sexp_round_head_wrap_list)
    xmap <silent><buffer> <LocalLeader>i  <Plug>(sexp_round_head_wrap_list)
    nmap <silent><buffer> <LocalLeader>I  <Plug>(sexp_round_tail_wrap_list)
    xmap <silent><buffer> <LocalLeader>I  <Plug>(sexp_round_tail_wrap_list)
    nmap <silent><buffer> <LocalLeader>[  <Plug>(sexp_square_head_wrap_list)
    xmap <silent><buffer> <LocalLeader>[  <Plug>(sexp_square_head_wrap_list)
    nmap <silent><buffer> <LocalLeader>]  <Plug>(sexp_square_tail_wrap_list)
    xmap <silent><buffer> <LocalLeader>]  <Plug>(sexp_square_tail_wrap_list)
    nmap <silent><buffer> <LocalLeader>{  <Plug>(sexp_curly_head_wrap_list)
    xmap <silent><buffer> <LocalLeader>{  <Plug>(sexp_curly_head_wrap_list)
    nmap <silent><buffer> <LocalLeader>}  <Plug>(sexp_curly_tail_wrap_list)
    xmap <silent><buffer> <LocalLeader>}  <Plug>(sexp_curly_tail_wrap_list)
    nmap <silent><buffer> <LocalLeader>w  <Plug>(sexp_round_head_wrap_element)
    xmap <silent><buffer> <LocalLeader>w  <Plug>(sexp_round_head_wrap_element)
    nmap <silent><buffer> <LocalLeader>W  <Plug>(sexp_round_tail_wrap_element)
    xmap <silent><buffer> <LocalLeader>W  <Plug>(sexp_round_tail_wrap_element)
    nmap <silent><buffer> <LocalLeader>e[ <Plug>(sexp_square_head_wrap_element)
    xmap <silent><buffer> <LocalLeader>e[ <Plug>(sexp_square_head_wrap_element)
    nmap <silent><buffer> <LocalLeader>e] <Plug>(sexp_square_tail_wrap_element)
    xmap <silent><buffer> <LocalLeader>e] <Plug>(sexp_square_tail_wrap_element)
    nmap <silent><buffer> <LocalLeader>e{ <Plug>(sexp_curly_head_wrap_element)
    xmap <silent><buffer> <LocalLeader>e{ <Plug>(sexp_curly_head_wrap_element)
    nmap <silent><buffer> <LocalLeader>e} <Plug>(sexp_curly_tail_wrap_element)
    xmap <silent><buffer> <LocalLeader>e} <Plug>(sexp_curly_tail_wrap_element)
    nmap <silent><buffer> <LocalLeader>h  <Plug>(sexp_insert_at_list_head)
    nmap <silent><buffer> <LocalLeader>l  <Plug>(sexp_insert_at_list_tail)
    nmap <silent><buffer> <LocalLeader>o  <Plug>(sexp_raise_list)
    xmap <silent><buffer> <LocalLeader>o  <Plug>(sexp_raise_list)
    nmap <silent><buffer> <LocalLeader>O  <Plug>(sexp_raise_element)
    xmap <silent><buffer> <LocalLeader>O  <Plug>(sexp_raise_element)
    imap <silent><buffer> <BS>            <Plug>(sexp_insert_backspace)
    imap <silent><buffer> "               <Plug>(sexp_insert_double_quote)
    imap <silent><buffer> (               <Plug>(sexp_insert_opening_round)
    imap <silent><buffer> )               <Plug>(sexp_insert_closing_round)
    imap <silent><buffer> [               <Plug>(sexp_insert_opening_square)
    imap <silent><buffer> ]               <Plug>(sexp_insert_closing_square)
    imap <silent><buffer> {               <Plug>(sexp_insert_opening_curly)
    imap <silent><buffer> }               <Plug>(sexp_insert_closing_curly)

    " Regular People
    nmap <buffer> dsf <Plug>(sexp_splice_list)
    nmap <buffer> <I  <Plug>(sexp_insert_at_list_head)
    nmap <buffer> >I  <Plug>(sexp_insert_at_list_tail)
    nmap <buffer> <f  <Plug>(sexp_swap_list_backward)
    nmap <buffer> >f  <Plug>(sexp_swap_list_forward)
    nmap <buffer> <e  <Plug>(sexp_swap_element_backward)
    nmap <buffer> >e  <Plug>(sexp_swap_element_forward)
    nmap <buffer> >(  <Plug>(sexp_emit_head_element)
    nmap <buffer> <)  <Plug>(sexp_emit_tail_element)
    nmap <buffer> <(  <Plug>(sexp_capture_prev_element)
    nmap <buffer> >)  <Plug>(sexp_capture_next_element)
    nmap <buffer> B   <Plug>(sexp_move_to_prev_element_head)
    nmap <buffer> W   <Plug>(sexp_move_to_next_element_head)
    nmap <buffer> gE  <Plug>(sexp_move_to_prev_element_tail)
    nmap <buffer> E   <Plug>(sexp_move_to_next_element_tail)
    xmap <buffer> B   <Plug>(sexp_move_to_prev_element_head)
    xmap <buffer> W   <Plug>(sexp_move_to_next_element_head)
    xmap <buffer> gE  <Plug>(sexp_move_to_prev_element_tail)
    xmap <buffer> E   <Plug>(sexp_move_to_next_element_tail)
    omap <buffer> B   <Plug>(sexp_move_to_prev_element_head)
    omap <buffer> W   <Plug>(sexp_move_to_next_element_head)
    omap <buffer> gE  <Plug>(sexp_move_to_prev_element_tail)
    omap <buffer> E   <Plug>(sexp_move_to_next_element_tail)

    " Slurps and Barfs
    nmap <buffer> ><  <Plug>(sexp_emit_tail_element)
    nmap <buffer> <>  <Plug>(sexp_capture_next_element)
endfunction

augroup VIM_SEXP_MAPPING
    autocmd!
    autocmd FileType clojure,scheme,lisp,timl call s:vim_sexp_mappings()
augroup END

" For vim-iced
set hidden
