let dark_background = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               Plugin Settings                               "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set runtimepath^=~/.config/nvim

" Enable plugins
call plug#begin()

" Editing
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'SirVer/ultisnips', { 'on': [] }
Plug 'ervandew/supertab'
Plug 'honza/vim-snippets'
Plug 'junegunn/vim-easy-align'
Plug 'kana/vim-textobj-user'
Plug 'scrooloose/nerdcommenter'

" Motions
Plug 'easymotion/vim-easymotion'
Plug 'ggVGc/vim-fuzzysearch'
Plug 'justinmk/vim-sneak'
Plug 'vim-scripts/ctags.vim'

" Colour Schemes
Plug 'morhetz/gruvbox'
Plug 'reedes/vim-colors-pencil'

" Utilities
Plug 'Shougo/vimproc', {'do' : 'make'}
Plug 'christoomey/vim-tmux-navigator'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'tomtom/tlib_vim'
Plug 'tpope/vim-fugitive'

" Visualisation
Plug 'airblade/vim-gitgutter'
Plug 'plasticboy/vim-markdown'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-scripts/textutil.vim'
Plug 'w0rp/ale'

" Python
Plug 'bps/vim-textobj-python'
Plug 'davidhalter/jedi-vim', { 'for': 'python' }
Plug 'manicmaniac/coconut.vim'
Plug 'zchee/deoplete-jedi'

" Haskell
Plug 'alx741/vim-hindent'
Plug 'nbouscal/vim-stylish-haskell'
Plug 'neovimhaskell/haskell-vim'
Plug 'parsonsmatt/intero-neovim'

" R
Plug 'jalvesaq/Nvim-R'

" Scala
Plug 'derekwyatt/vim-scala'

" Docker
Plug 'ekalinin/Dockerfile.vim'

if has("unix")
  let s:uname = system("uname")
  if s:uname == "Darwin\n"
        Plug 'junegunn/vim-xmark', { 'do': 'make' }
  endif
endif

" Add plugins to &runtimepath
call plug#end()
nnoremap <Space>I :PlugInstall<CR>
nnoremap <Space>U :PlugUpdate<CR>

" Lazy loading for UltiSnips
augroup load_ultisnips
  autocmd!
  autocmd InsertEnter * call plug#load('ultisnips') | autocmd! load_ultisnips
augroup END

autocmd FileType coconut setlocal commentstring=#\ %s

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                            Vim General Settings                             "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set the leader to comma
let mapleader = ","

" Makes copy and pasting work
set clipboard=unnamed
set clipboard+=unnamedplus

" One tab equals to four spaces
set tabstop=4
set softtabstop=4
set shiftwidth=4

" Use multiple of shiftwidth when indenting with '<' and '>'
set shiftround

" Expand tab to spaces
set expandtab

" Search case insensitive when all characters are lower case
set ignorecase
set smartcase

" Does not release visual mode during block indentation
vnoremap < <gv
vnoremap > >gv

" Turning of highlights (after searching)
nnoremap ff :nohlsearch <CR>

" Close current tab
nnoremap <Leader>e :q<CR>

" Save current script
nnoremap <C-s> :update<CR>
inoremap <C-s> <C-c>:update<CR>

" Remove trailing whitespace
nnoremap <silent> <Leader>w :keeppatterns %s/\s\+$//<CR>

" No more weird characters when pressing <Esc>
set ttimeout
set ttimeoutlen=0

" Faster scrolling
set ttyfast

" Enable omnicompletion
filetype plugin on
set omnifunc=syntaxcomplete#Complete

" Enable syntax highlighting
syntax on
filetype plugin indent on

" This does not seem to work with NeoVim
" For tmux colour compatibility
if has('vim')
    set term=screen-256color
endif

" Disable folding so that the key 'f' can be used for movement
set nofoldenable

" The bells can be distracting in OSX
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" Gets rid of weird character in new GNOME terminal
if has("unix")
  let s:uname = system("uname")
  if s:uname == "Linux\n"
        set novisualbell
  endif
endif

" More line buffer
set so=3

" Better copy and paste
set pastetoggle=<F2>

" Mouse and backspace
set mouse=a
set bs=2

" Showing line numbers and length
set number
set relativenumber
set fo-=t

" Useful settings
set history=700
set undolevels=700

" Make search case insensitive
" set hlsearch
" set incsearch

" Disable stupid backup and swap files - they trigger too many events
" for file system watchers
set nobackup
set nowritebackup
set noswapfile

" Tab management
set splitright
set splitbelow

" Live substitute preview
 if has('nvim')
     set inccommand=nosplit
 endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Colour Scheme                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" It looks nicer in some colour schemes
if dark_background
    silent! colorscheme oceanic
else
    silent! colorscheme akk_light
endif

" This is needed to make Airline work
set laststatus=2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Vim Bindings                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Shortuct to reload vimrc
nmap <Leader>R :so ~/.config/nvim/init.vim<CR>:echo '.nvimrc reloaded!'<CR>
nmap <Leader>M :so ~/dotfiles/vim/others/mbk_vimrc<CR>:echo 'Changed to MBK'<CR>
nmap <Leader>A :so ~/dotfiles/vim/vimrc<CR>:echo 'Changed to AKK'<CR>

" Jump to escape mode
inoremap hh <C-c>
inoremap thhh th<C-c>
inoremap jj <C-c>
tnoremap <Esc> <C-\><C-n>

" Moving up and down physical lines
nnoremap j gj
nnoremap k gk

" Page up and down, then centers the cursor
noremap <C-u> <S-Up>zz
noremap <C-d> <S-Down>zz

" Jump to next method
nmap }} ]m

" Centers screen whenever a search is found
nnoremap G Gzz
nnoremap n nzz
nnoremap N Nzz

" Pane movements
nnoremap <Leader>hs :split<CR>
nnoremap <Leader>vs :vsplit<CR>

" Copy the entire script to the clipboard
nnoremap <Leader>l mwggVG"+y'wzz
" Copy from current line to the top
nnoremap <Leader>k mwggV'w"+y'wzz
" Copy from current line to the bottom
nnoremap <Leader>j mwGV'w"+y'wzz
" Copy entire line to the clipboard
nnoremap <Leader>y V"+y
" Copy selection to the clipboard
vnoremap <Leader>c "+y

" Highlight downwards and upwards within a function
nnoremap <Leader>u V{
nnoremap <Leader>d V}

" Map sort function to a key
vnoremap <Leader>o :sort<CR>

" Switch back and forth between relative and absolute number
nnoremap <Leader>n :set relativenumber!<CR>

" Fold Toggle
nnoremap <Leader>f za
nnoremap <Leader>df zE
nnoremap <Leader>} zfa}

" Since <C-a> is the Tmux prefix, we replace <C-a> with <C-o>
inoremap <C-o> <C-a>

" Repeat dot on multiple lines
vnoremap . :normal .<CR>

" Adds numbered jumps to jump list
nnoremap <expr> k (v:count > 1 ? "m'" . v:count : '') . 'k'
nnoremap <expr> j (v:count > 1 ? "m'" . v:count : '') . 'j'

" Make Ctrl-e jump to the end of the current line in the insert mode. This is
" handy when you are in the middle of a line and would like to go to its end
" without switching to the normal mode.
inoremap <C-e> <C-o>$

" Set colour column shortcut
nnoremap <Leader>8 :set colorcolumn=80<CR>

" Jumping between tabs
nnoremap ( :tabprevious<CR>
nnoremap ) :tabnext<CR>

" Force write
nnoremap <C-w> :w<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Generic Autos                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

autocmd BufRead,BufNewFile *.md setfiletype markdown
autocmd BufRead,BufNewFile *.sc setfiletype scala

" Enbale CUDA syntax
au BufNewFile,BufRead *.cu set ft=cu
au BufNewFile,BufRead *.cuh set ft=cu

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                   Plugins                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Tmux Navigator
if exists('$TMUX')
    function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    silent! execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
        call system("tmux select-pane -" . a:tmuxdir)
        redraw!
    endif
    endfunction

    let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
    let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
    let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

    nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<cr>
    nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<cr>
    nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<cr>
    nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<cr>
    tnoremap <silent> <C-h> <C-\><C-n>:call TmuxOrSplitSwitch('h', 'L')<cr>
    tnoremap <silent> <C-j> <C-\><C-n>:call TmuxOrSplitSwitch('j', 'D')<cr>
    tnoremap <silent> <C-k> <C-\><C-n>:call TmuxOrSplitSwitch('k', 'U')<cr>
    tnoremap <silent> <C-l> <C-\><C-n>:call TmuxOrSplitSwitch('l', 'R')<cr>
else
    map <C-h> <C-w>h
    map <C-j> <C-w>j
    map <C-k> <C-w>k
    map <C-l> <C-w>l
endif

" Airline
let g:airline_theme = 'distinguished'
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_left_sep = '»'
let g:airline_right_sep = '«'
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }
let g:airline_section_y = ''

" GitGutter
set signcolumn=yes
nmap <Space>gg :GitGutter<CR>
nmap <Space>] <Plug>GitGutterPrevHunk
nmap <Space>[ <Plug>GitGutterNextHunk
nmap <Space>hs <Plug>GitGutterStageHunk
nmap <Space>hr <Plug>GitGutterRevertHunk

" Ale
let g:ale_linters = {'python': ['pyflakes'], 'scala': ['scalastyle']}
let g:ale_completion_enabled = 1
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '!!'
hi ALEErrorSign ctermbg=234 ctermfg=9
hi ALEWarningSign ctermbg=234 ctermfg=11
hi ALEWarning ctermbg=DarkMagenta
let g:airline#extensions#ale#enabled = 1

" Fugitive
nmap <Space>gd :Gdiff<CR>
nmap <Space>gb :Gblame<CR>

" NERDTree toggle
nmap <Space>n :NERDTreeToggle<CR>

" NERDCommenter
let g:NERDCreateDefaultMappings = 0
nmap <Space>c <Plug>NERDCommenterToggle
vmap <Space>c <Plug>NERDCommenterToggle
nmap gcc <Plug>NERDCommenterToggle
vmap gcc <Plug>NERDCommenterToggle

" SuperTab
let g:SuperTabDefaultCompletionType = "<c-n>"

" EasyMotion
let g:EasyMotion_smartcase = 1
let g:EasyMotion_keys = "aoeui'l;z,rqv.cjwyfxbdhtns"
" This is to get rid of awful <Leader><Leader> default
map <Space><Space>em <Plug>(easymotion-prefix)
nmap <Space><Space> <Plug>(easymotion-s)
vmap <Space><Space> <Plug>(easymotion-s)

" Vim-Sneak
nmap S <Plug>Sneak_s
nmap Z <Plug>Sneak_S

" FuzzySearch
" FZF
" nnoremap <C-t> :FZF ~<CR>
nnoremap <Space>f :FZF ~<CR>
nnoremap <Space>p :FZF<CR>
let g:fzf_action = {
            \'enter': 'tabedit',
            \'ctrl-v': 'vsplit',
            \'ctrl-t': 'tabedit'}

" Easy Align
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" UltiSnips
let g:UltiSnipsExpandTrigger = "<Tab>"
let g:UltiSnipsJumpForwardTrigger = "<C-b>"
let g:UltiSnipsJumpBackwardTrigger = "<C-z>"
let g:UltiSnipsSnippetDirectories = ["UltiSnips", "custom_snippets"]

" Easy-Align
nmap <Space>= V}oga*=<CR>

" Deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#sources = {}
let g:deoplete#sources.scala = ['buffer', 'tags', 'omni']
let g:deoplete#omni#input_patterns = {}
let g:deoplete#omni#input_patterns.scala = ['[^. *\t0-9]\.\w*',': [A-Z]\w', '[\[\t\( ][A-Za-z]\w*']

" Ctags
set tags=./tags;/
nnoremap <C-[> <C-T>
"nnoremap <C-T> <C-w><C-]><C-w>T
nnoremap <C-T> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>

" Jedi
let g:jedi#force_py_version = 3

" Haskell - Taken from: https://blog.jez.io/haskell-development-with-neovim/
let g:ale_linters.haskell = ['stack-ghc-mod', 'hlint']
let g:haskell_indent_before_where = 2
let g:haskell_indent_case_alternative = 1
let g:haskell_indent_if = 2
let g:haskell_indent_let_no_in = 0
let g:hindent_line_length = 90
let g:hindent_on_save = 0
let g:intero_start_immediately = 1
let g:intero_type_on_hover = 1
let g:intero_use_neomake = 0
let g:intero_vertical_split = 1
let g:intero_window_size = 8
set updatetime=100
