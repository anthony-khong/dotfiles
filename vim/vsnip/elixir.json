{
  "to-list": {
    "prefix": ">l",
    "body": "|> Enum.to_list()"
  },
  "pipe-flow-map": {
    "prefix": ">Fm",
    "body": "|> Flow.map(fn ${1} -> ${0} end)"
  },
  "pipe-flow-filter": {
    "prefix": ">Ff",
    "body": "|> Flow.filter(fn ${1} -> ${0} end)"
  },
  "pipe-flow": {
    "prefix": ">F",
    "body": [
       "|> Flow.from_enumerable()",
       "|> Flow.partition(max_demand: ${1:max_demand}, stages: ${2:stages})"
    ]
  },
  "def-module": {
    "prefix": "defmo",
    "body": [
      "defmodule ${1:${VIM:substitute(substitute(expand('%:t:r'),'\\(\\%(\\<\\l\\+\\)\\%(_\\)\\@=\\)\\|_\\(\\l\\)','\\u\\1\\2','g'),'\\<.','\\u&','g')}} do",
      "  ${2:body}",
      "end"
    ]
  },
  "empty-map": {
    "prefix": "m",
    "body": [
      "%{\"${1:${VISUAL:key}}\" => ${2:value}}"
    ]
  },
  "heex-template": {
    "prefix": "heex",
    "body": [
      "~H\"\"\"",
      "${2:body}",
      "\"\"\""
    ]
  },
  "handle-info": {
    "prefix": "info",
    "body": [
      "def handle_info(${1:${VISUAL:event}}, state) do",
      "  {:noreply, state}",
      "end"
    ]
  },
  "liveview-function-component": {
    "prefix": "fcomp",
    "body": [
      "def ${1:${VISUAL:component_name}}(assigns) do",
      "  ~H\"\"\"",
      "  ${2:body}",
      "  \"\"\"",
      "end"
    ]
  },
  "live-component-markup": {
    "prefix": "lv",
    "body": [
      "<.live_component module={${1:${VISUAL:module}}} id={${2:id}} />"
    ]
  },
  "live-component-update": {
    "prefix": "cupdate",
    "body": [
      "def update(assigns, socket) do",
      "  {:ok, assign(socket, ${1:${VISUAL:assigns}})}",
      "end"
    ]
  },
  "live-component-mount": {
    "prefix": "cmount",
    "body": [
      "def mount(socket) do",
      "  {:ok, assign(socket, ${1:${VISUAL:assigns}})}",
      "end"
    ]
  },
  "liveview-mount": {
    "prefix": "mount",
    "body": [
      "def mount(params, session, socket) do",
      "  {:ok, assign(socket, ${1:${VISUAL:assigns}})}",
      "end"
    ]
  },
  "liveview-handle-params": {
    "prefix": "params",
    "body": [
      "def handle_params(params, uri, socket) do",
      "  {:noreply, socket}",
      "end"
    ]
  },
  "liveview-render": {
    "prefix": "render",
    "body": [
      "def render(assigns) do",
      "  ~H\"\"\"",
      "  ${1:${VISUAL:template}}",
      "  \"\"\"",
      "end"
    ]
  },
  "liveview-event": {
    "prefix": "event",
    "body": [
      "def handle_event(${1:${VISUAL:event}}, data, socket) do",
      "  {:noreply, assign(socket)}",
      "end"
    ]
  },
  "pipe->": {
    "prefix": ">",
    "body": "|> $0"
  },
  "pipe-map": {
    "prefix": ">m",
    "body": "|> Enum.map(fn ${1} -> ${0} end)"
  },
  "pipe-map-point-free": {
    "prefix": ">mpf",
    "body": "|> Enum.map(&${0})"
  },
  "pipe-map-anon": {
    "prefix": ">ma",
    "body": "|> Enum.map(&(${0}))"
  },
  "pipe-filter": {
    "prefix": ">f",
    "body": "|> Enum.filter(fn ${1} -> ${0} end)"
  },
  "pipe-reduce": {
    "prefix": ">r",
    "body": "|> Enum.reduce(${1:acc}, fn ${2}, ${3:acc} -> ${0} end)"
  },
  "pipe-inspect": {
    "prefix": ">i",
    "body": "|> IO.inspect()"
  },
  "pipe-inspect-label": {
    "prefix": ">il",
    "body": "|> IO.inspect(label: \"${1:label}\")"
  },
  "word-list": {
    "prefix": "wl",
    "body": "~w(${0})"
  },
  "atom-list": {
    "prefix": "al",
    "body": "~w(${0})a"
  },
  "inspect": {
    "prefix": "ins",
    "body": "IO.inspect($0)"
  },
  "implementation": {
    "prefix": "impl",
    "body": [
      "@impl true",
      "def ${1:name} do",
      "  ${0}",
      "end"
    ]
  },
  "require-explorer-dataframe": {
    "prefix": "DF",
    "body": "require Explorer.DataFrame, as: DF"
  },
  "alias-explorer-series": {
    "prefix": "S",
    "body": "alias Explorer.Series, as: S"
  },
  "ash-actions": {
    "prefix": "act",
    "body": ["actions do", "  $0", "end"]
  },
  "ash-attributes": {
    "prefix": "attrs",
    "body": ["attributes do", "  $0", "end"]
  },
  "ash-attribute": {
    "prefix": "attr",
    "body": "attribute ${1:field}, ${2::type}"
  },
  "ash-relationships": {
    "prefix": "rel",
    "body": ["relationships do", "  $0", "end"]
  },
  "ash-resource": {
    "prefix": "ashr",
    "body": "use Ash.Resource, data_layer: AshPostgres.DataLayer"
  },
  "recompile": {
    "prefix": "rec",
    "body": ["recompile()"]
  },
  "section-break": {
    "prefix": "sb",
    "body": [
      "# =============================================",
      "# ${1:${VISUAL:Section}}",
      "# ============================================="
    ]
  }
}
